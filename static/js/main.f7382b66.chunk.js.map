{"version":3,"sources":["Context.js","components/Button.jsx","components/Nav.jsx","components/Card.jsx","components/CardDeckComponent.jsx","components/CardBankContainer.jsx","components/Player.jsx","App.js","utils/defaultSettings.js","utils/methods.js","containers/AppContainer.jsx","index.js"],"names":["React","createContext","text","onClick","className","onShuffle","onStart","state","useContext","Context","start","Button","card","position","style","CardDeck","map","index","left","Card","key","cardBank","right","playerName","setPlayerMove","isPlayerMove","hand","top","App","Nav","CardDeckComponent","Player","player1","bind","player2","CardBankContainer","winningPlayer","cardWeight","6","7","8","9","10","defaultCardDeck","shuffle","j","temp","i","length","Math","floor","random","isWinnerMove","currentCard","previousCard","AppContainer","distributionOfCards","theFirstPlayerHand","theSecondPlayerHand","push","setState","concat","cardMove","playerHand","copyCardBank","pop","setTimeout","currentPlayer","nextPlayer","event","preventDefault","console","log","this","prevProps","prevState","Provider","value","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7382b66.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default React.createContext(null);","import React from 'react';\r\n\r\nexport default ({ text, onClick }) => (\r\n    <button className=\"btn\" onClick={ onClick } >\r\n        { text }\r\n    </button>\r\n);\r\n","import React, { useContext } from 'react';\r\n\r\nimport Button from \"./Button\";\r\nimport Context from \"../Context\";\r\n\r\nexport default ({ onShuffle, onStart }) => {\r\n    const state = useContext(Context);\r\n\r\n    return (\r\n        <div className=\"nav\">\r\n            { !state.start &&\r\n                <>\r\n                    <div>\r\n                        <Button text=\"Shuffle the deck\" onClick={ onShuffle } />\r\n                    </div>\r\n                    <div>\r\n                        <Button text=\"Start game\" onClick={ onStart } />\r\n                    </div>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nexport default ({ card, position }) => (\r\n    <div className=\"card-deck__card\" style={position}>\r\n        { card && <p className=\"card-deck__card__card-title\">{ card }</p> }\r\n    </div>\r\n);\r\n","import React, { useContext } from 'react';\r\n\r\nimport Card from \"./Card\";\r\nimport Context from \"../Context\";\r\n\r\nexport default () => {\r\n    const { CardDeck } = useContext(Context);\r\n\r\n    return (\r\n        <div className=\"cardDeck\">\r\n            { CardDeck.map((card, index) => {\r\n                        let left = 50 - (index * 0.01) + \"%\";\r\n                        return <Card\r\n                            key={ index + 1 }\r\n                            position={{ left: left }}\r\n                        />\r\n                    }\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\nexport default ({ cardBank }) => {\r\n    return (\r\n        <div className=\"card-bank\">\r\n            { cardBank.map((card, index) => {\r\n                let right = 5 + (index +1) + \"%\";\r\n                return <Card\r\n                    card={ card }\r\n                    position={{ right: right }}\r\n                    key={ index }\r\n                />\r\n            }) }\r\n        </div>\r\n    );\r\n};\r\n","import React, { useContext } from 'react';\r\n\r\nimport Card from \"./Card\";\r\nimport Context from \"../Context\";\r\n\r\nexport default ({ playerName, setPlayerMove }) => {\r\n    const state = useContext(Context);\r\n\r\n    return (\r\n        <div className=\"player\">\r\n            <div className=\"player__name\">\r\n                <p>{ playerName }</p>\r\n                { state[playerName].isPlayerMove && <span className=\"player__name-turn\">You turn!</span> }\r\n            </div>\r\n\r\n            <div onClick={ setPlayerMove } >{ state[playerName].hand.map((card, index) => {\r\n                    let left = 50 - (index + 1) + \"%\";\r\n                    return <Card key={ index } position={{ left: left, top: \"150px\" }} />\r\n                }\r\n            )}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n};","import React, { useContext }  from 'react';\nimport './App.css';\n\nimport { CardBankContainer, CardDeckComponent, Nav, Player } from \"./components\";\nimport Context from \"./Context\";\n\nconst App = ({ onShuffle, onStart, setPlayerMove }) => {\n    const state = useContext(Context);\n\n   return (\n       <div className=\"App\">\n           <Nav onShuffle={ onShuffle } onStart={ onStart } />\n           <CardDeckComponent />\n           { state.start &&\n               <div className=\"players-container\">\n                   <Player\n                       playerName=\"player1\"\n                       setPlayerMove={ state.player1.isPlayerMove\n                           ? setPlayerMove.bind(this, \"player1\", \"player2\")\n                           : () => {}\n                       }\n                   />\n                   <Player\n                       playerName=\"player2\"\n                       setPlayerMove={ state.player2.isPlayerMove\n                           ? setPlayerMove.bind(this, \"player2\", \"player1\")\n                           : () => {}\n                       }\n                   />\n               </div>\n           }\n           <CardBankContainer cardBank={ state.cardBank } />\n           { !!state.winningPlayer &&\n                <h2 className=\"win-title\">{ state.winningPlayer } won!!!</h2>\n           }\n       </div>\n   );\n};\n\nexport default App;\n","export const cardWeight = {\r\n    6: 6,\r\n    7: 7,\r\n    8: 8,\r\n    9: 9,\r\n    10: 10,\r\n    \"J\": 11,\r\n    \"Q\": 12,\r\n    \"K\": 13,\r\n    \"A\": 14\r\n};\r\n\r\nexport const defaultCardDeck = [\r\n    6,6,6,6,\r\n    7,7,7,7,\r\n    8,8,8,8,\r\n    9,9,9,9,\r\n    10,10,10,10,\r\n    \"J\",\"J\",\"J\",\"J\",\r\n    \"Q\",\"Q\",\"Q\",\"Q\",\r\n    \"K\",\"K\",\"K\",\"K\",\r\n    \"A\",\"A\",\"A\",\"A\"\r\n];\r\n","import { cardWeight } from \"./defaultSettings\";\r\n\r\nexport const shuffle = CardDeck => {\r\n    let j, temp;\r\n    for(let i = CardDeck.length -1; i > 0 ; --i){\r\n        j = Math.floor(Math.random()*(i + 1));\r\n        temp = CardDeck[j];\r\n        CardDeck[j] = CardDeck[i];\r\n        CardDeck[i] = temp;\r\n    }\r\n\r\n    return CardDeck;\r\n};\r\n\r\nexport const isWinnerMove = (currentCard, previousCard) => {\r\n    if(currentCard === 6 && previousCard === \"A\") {\r\n        return true\r\n    } else if(cardWeight[currentCard] > cardWeight[previousCard]) {\r\n        return true\r\n    }\r\n\r\n    return false\r\n};","import React, { Component } from 'react';\r\n\r\nimport Context from \"./../Context\";\r\nimport App from \"./../App\";\r\n\r\nimport { shuffle, isWinnerMove } from \"./../utils/methods\";\r\nimport { defaultCardDeck } from \"./../utils/defaultSettings\";\r\n\r\nexport class AppContainer extends Component {\r\n    state = {\r\n        start: false,\r\n        player1: {\r\n            isPlayerMove: true,\r\n            hand: []\r\n        },\r\n        player2: {\r\n            isPlayerMove: false,\r\n            hand: []\r\n        },\r\n        CardDeck: [],\r\n        cardBank: [],\r\n        winningPlayer: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({CardDeck: shuffle(defaultCardDeck)});\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { start, CardDeck } = this.state;\r\n\r\n        if(prevState.start !== start) {\r\n            if(start) {\r\n                this.setState({\r\n                    winningPlayer: \"\"\r\n                });\r\n                this.distributionOfCards(CardDeck);\r\n            }\r\n        }\r\n    }\r\n\r\n    distributionOfCards = CardDeck => {\r\n        let theFirstPlayerHand = [];\r\n        let theSecondPlayerHand = [];\r\n        let { player1, player2 } = this.state;\r\n\r\n        for(let i = CardDeck.length - 1; i >= 0; --i) {\r\n            if(i % 2 !== 0) {\r\n                theFirstPlayerHand.push(CardDeck[i])\r\n            } else {\r\n                theSecondPlayerHand.push(CardDeck[i])\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            player1: { ...player1, hand: player1.hand.concat(theFirstPlayerHand)},\r\n            player2: { ...player2, hand: player2.hand.concat(theSecondPlayerHand)},\r\n            CardDeck: []\r\n        })\r\n    };\r\n\r\n    cardMove = playerHand => {\r\n        let copyCardBank = [...this.state.cardBank];\r\n        let currentCard = playerHand.pop();\r\n        copyCardBank.push(currentCard);\r\n\r\n        this.setState({ cardBank: copyCardBank });\r\n\r\n        if(isWinnerMove(currentCard, copyCardBank[copyCardBank.length - 2])) {\r\n            setTimeout(() => {\r\n                this.setState({cardBank: []});\r\n            }, 1000);\r\n            return [...copyCardBank].concat(playerHand);\r\n        }\r\n\r\n        return playerHand\r\n    };\r\n\r\n    setPlayerMove = (currentPlayer, nextPlayer, event) => {\r\n        event.preventDefault();\r\n\r\n        this.setState({\r\n            [currentPlayer]: {\r\n                isPlayerMove: false,\r\n                hand: this.cardMove(this.state[currentPlayer].hand)\r\n            },\r\n            [nextPlayer]: {\r\n                ...this.state[nextPlayer],\r\n                isPlayerMove: true\r\n            },\r\n        });\r\n\r\n        if(!this.state[currentPlayer].hand.length) {\r\n            this.setState({\r\n                start: false,\r\n                player1: {\r\n                    isPlayerMove: true,\r\n                    hand: []\r\n                },\r\n                player2: {\r\n                    isPlayerMove: false,\r\n                    hand: []\r\n                },\r\n                cardBank: [],\r\n                CardDeck: shuffle(defaultCardDeck),\r\n                winningPlayer: nextPlayer\r\n            }, () => console.log(this.state))\r\n        }\r\n    };\r\n\r\n    onShuffle = () => {\r\n        this.setState({ CardDeck: this.shuffle(this.state.CardDeck) })\r\n    };\r\n\r\n    onStart = () => this.setState({ start: true });\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={ this.state }>\r\n                <App\r\n                    onShuffle={ this.onShuffle }\r\n                    onStart={ this.onStart }\r\n                    setPlayerMove={ this.setPlayerMove }\r\n                />\r\n            </Context.Provider>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from \"./containers\"\n\nReactDOM.render(<AppContainer />, document.getElementById('root'));\n\n"],"sourceRoot":""}