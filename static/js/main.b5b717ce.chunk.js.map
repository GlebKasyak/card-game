{"version":3,"sources":["Context.js","components/Button/Button.jsx","utils/defaultSettings.js","utils/methods.js","components/Nav/Nav.jsx","components/Card/Card.jsx","components/CardDeckComponent/CardDeckComponent.jsx","components/CardBankComponent/CardBankComponent.jsx","components/Player/Player.jsx","App.js","index.js","containers/AppContainer.jsx"],"names":["React","createContext","text","onClick","className","cardWeight","6","7","8","9","10","defaultCardDeck","shuffle","CardDeck","j","temp","i","length","Math","floor","random","state","useContext","Context","start","Button","setCardDeck","setGame","card","position","style","map","index","left","Card","key","cardBank","right","currentPlayer","nextPlayer","isPlayerMove","setPlayerMove","bind","hand","top","App","Nav","CardDeckComponent","Player","CardBankComponent","winningPlayer","ReactDOM","render","useState","game","player1","player2","player","setPlayer","setCardBank","useEffect","distributionOfCards","theFirstPlayerHand","theSecondPlayerHand","push","concat","cardMove","playerHand","copyCardBank","currentCard","pop","previousCard","isWinnerMove","setTimeout","event","preventDefault","Provider","value","document","getElementById"],"mappings":"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","file":"static/js/main.b5b717ce.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default React.createContext(null);","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nexport default ({ text, onClick }) => (\r\n    <button className=\"btn\" onClick={ onClick } >\r\n        { text }\r\n    </button>\r\n);\r\n","export const cardWeight = {\r\n    6: 6,\r\n    7: 7,\r\n    8: 8,\r\n    9: 9,\r\n    10: 10,\r\n    \"J\": 11,\r\n    \"Q\": 12,\r\n    \"K\": 13,\r\n    \"A\": 14\r\n};\r\n\r\nexport const defaultCardDeck = [\r\n    6,6,6,6,\r\n    7,7,7,7,\r\n    8,8,8,8,\r\n    9,9,9,9,\r\n    10,10,10,10,\r\n    \"J\",\"J\",\"J\",\"J\",\r\n    \"Q\",\"Q\",\"Q\",\"Q\",\r\n    \"K\",\"K\",\"K\",\"K\",\r\n    \"A\",\"A\",\"A\",\"A\"\r\n];\r\n","import { cardWeight } from \"./defaultSettings\";\r\n\r\nexport const shuffle = CardDeck => {\r\n    let j, temp;\r\n    for(let i = CardDeck.length -1; i > 0 ; --i){\r\n        j = Math.floor(Math.random()*(i + 1));\r\n        temp = CardDeck[j];\r\n        CardDeck[j] = CardDeck[i];\r\n        CardDeck[i] = temp;\r\n    }\r\n\r\n    return CardDeck;\r\n};\r\n\r\nexport const isWinnerMove = (currentCard, previousCard) => {\r\n    if(currentCard === 6 && previousCard === \"A\") {\r\n        return true\r\n    } else if(currentCard === \"A\" && previousCard === 6) {\r\n        return false\r\n    } else if(cardWeight[currentCard] > cardWeight[previousCard]) {\r\n        return true\r\n    }\r\n\r\n    return false\r\n};","import React, { useContext } from 'react';\r\nimport \"./style.css\";\r\n\r\nimport Button from \"../Button/Button\";\r\nimport Context from \"../../Context\";\r\n\r\nimport { shuffle } from \"../../utils/methods\";\r\n\r\nexport default () => {\r\n    const state = useContext(Context);\r\n\r\n    return (\r\n        <div className=\"nav\">\r\n            { !state.start &&\r\n                <>\r\n                    <div>\r\n                        <Button\r\n                            text=\"Shuffle the deck\"\r\n                            onClick={ () =>  state.setCardDeck(shuffle(state.CardDeck)) }\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <Button\r\n                            text=\"Start game\"\r\n                            onClick={ () => state.setGame({ start: true }) }\r\n                        />\r\n                    </div>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nexport default ({ card, position }) => (\r\n    <div className=\"card\" style={ position }>\r\n        { card &&\r\n            <p className=\"card__card-title\">{ card }</p>\r\n        }\r\n    </div>\r\n);\r\n","import React, { useContext } from 'react';\r\n\r\nimport Card from \"../Card/Card\";\r\nimport Context from \"../../Context\";\r\n\r\n//component for displaying the starting deck of cards\r\nexport default () => {\r\n    const { CardDeck } = useContext(Context);\r\n\r\n    return (\r\n        <div className=\"card-deck\">\r\n            { CardDeck.map((card, index) => {\r\n                let left = 50 - (index * 0.01) + \"%\";\r\n\r\n                return (\r\n                    <Card\r\n                        key={ index + 1 }\r\n                        position={{ left: left }}\r\n                    />\r\n                )})\r\n            }\r\n        </div>\r\n    );\r\n};","import React, { useContext } from 'react';\r\nimport \"./style.css\";\r\n\r\nimport Card from \"../Card/Card\";\r\nimport Context from \"../../Context\";\r\n\r\n//component for displaying the card bank\r\nexport default () => {\r\n    const state = useContext(Context);\r\n\r\n    return (\r\n        <div className=\"card-bank\">\r\n            { state.cardBank.map((card, index) => {\r\n                let right = 5 + (index +1) + \"%\";\r\n\r\n                return (\r\n                    <Card\r\n                        card={ card }\r\n                        position={{ right: right }}\r\n                        key={ index }\r\n                    />\r\n                )})\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\n","import React, { useContext } from 'react';\r\nimport \"./style.css\";\r\n\r\nimport Card from \"../Card/Card\";\r\nimport Context from \"../../Context\";\r\n\r\n//player component\r\nexport default ({ currentPlayer, nextPlayer }) => {\r\n    const state = useContext(Context);\r\n\r\n    return (\r\n        <div className=\"player\">\r\n            <div className=\"player__name\">\r\n                <p>{ currentPlayer }</p>\r\n                { state[currentPlayer].isPlayerMove &&\r\n                    <span className=\"player__name-turn\">You turn!</span>\r\n                }\r\n            </div>\r\n\r\n            <div onClick={\r\n                state[currentPlayer].isPlayerMove\r\n                    ? state.setPlayerMove.bind(this, currentPlayer, nextPlayer )\r\n                    : () => {}\r\n                }\r\n            >\r\n                { state[currentPlayer].hand.map((card, index) => {\r\n                    let left = 50 - (index + 1) + \"%\";\r\n                    return <Card key={ index } position={{ left: left, top: \"150px\" }} />\r\n                }\r\n            )}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n};","import React, { useContext }  from 'react';\nimport './App.css';\n\nimport { CardBankComponent, CardDeckComponent, Nav, Player } from \"./components\";\nimport Context from \"./Context\";\n\nconst App = () => {\n    const state = useContext(Context);\n\n    return (\n       <div className=\"App\">\n           <Nav />\n           <CardDeckComponent />\n           { state.start &&\n               <div className=\"players-container\">\n                   <Player\n                       currentPlayer=\"player1\"\n                       nextPlayer=\"player2\"\n                   />\n                   <Player\n                       currentPlayer=\"player2\"\n                       nextPlayer=\"player1\"\n                   />\n               </div>\n           }\n           <CardBankComponent />\n           { !!state.winningPlayer &&\n                <h2 className=\"win-title\">{ state.winningPlayer } won!!!</h2>\n           }\n       </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from \"./containers\"\n\nReactDOM.render(<AppContainer />, document.getElementById('root'));\n\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport Context from \"./../Context\";\r\nimport App from \"./../App\";\r\n\r\nimport { shuffle, isWinnerMove } from \"./../utils/methods\";\r\nimport { defaultCardDeck } from \"./../utils/defaultSettings\";\r\n\r\nexport const  AppContainer = () => {\r\n    const [game, setGame] = useState({\r\n        start: false,\r\n        winningPlayer: \"\"\r\n    });\r\n\r\n    const [player, setPlayer] = useState({\r\n        player1: {\r\n            isPlayerMove: true,\r\n            hand: []\r\n        },\r\n        player2: {\r\n            isPlayerMove: false,\r\n            hand: []\r\n        },\r\n    });\r\n\r\n    const [CardDeck, setCardDeck] = useState([]);\r\n    const [cardBank, setCardBank] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setCardDeck(shuffle(defaultCardDeck));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(game.start) {\r\n            setGame({ start: true, winningPlayer: \"\" });\r\n            distributionOfCards(CardDeck);\r\n        }\r\n    }, [game.start]);\r\n\r\n    //distribution of cards to players\r\n    const distributionOfCards = CardDeck => {\r\n        let theFirstPlayerHand = [];\r\n        let theSecondPlayerHand = [];\r\n        let { player1, player2 } = player;\r\n\r\n        for(let i = CardDeck.length - 1; i >= 0; --i) {\r\n            if(i % 2 !== 0) {\r\n                theFirstPlayerHand.push(CardDeck[i])\r\n            } else {\r\n                theSecondPlayerHand.push(CardDeck[i])\r\n            }\r\n        }\r\n\r\n        setPlayer({\r\n            player1: { ...player1, hand: player1.hand.concat(theFirstPlayerHand)},\r\n            player2: { ...player2, hand: player2.hand.concat(theSecondPlayerHand)}\r\n        });\r\n        setCardDeck([]);\r\n    };\r\n\r\n    //card move\r\n    const cardMove = playerHand => {\r\n        let copyCardBank = [...cardBank];\r\n        let currentCard = playerHand.pop();\r\n\r\n        copyCardBank.push(currentCard);\r\n        setCardBank(copyCardBank);\r\n\r\n        //check move on win\r\n        if(isWinnerMove(currentCard, copyCardBank[copyCardBank.length - 2])) {\r\n            setTimeout(() => {\r\n                setCardBank([]);\r\n            }, 500);\r\n            return [...copyCardBank].concat(playerHand);\r\n        }\r\n\r\n        return playerHand\r\n    };\r\n\r\n    const setPlayerMove = (currentPlayer, nextPlayer, event) => {\r\n        event.preventDefault();\r\n\r\n        //player move\r\n        setPlayer({\r\n            [currentPlayer]: {\r\n                isPlayerMove: false,\r\n                hand: cardMove(player[currentPlayer].hand)\r\n            },\r\n            [nextPlayer]: {\r\n                ...player[nextPlayer],\r\n                isPlayerMove: true\r\n            },\r\n        });\r\n\r\n        //clear state and show winner player\r\n        if(!player[currentPlayer].hand.length) {\r\n            setGame({\r\n                start: false,\r\n                winningPlayer: nextPlayer\r\n            });\r\n            setPlayer({\r\n                player1: {\r\n                    isPlayerMove: true,\r\n                    hand: []\r\n                },\r\n                player2: {\r\n                    isPlayerMove: false,\r\n                    hand: []\r\n                }\r\n            });\r\n            setCardDeck(shuffle(defaultCardDeck));\r\n            setCardBank([]);\r\n        }\r\n    };\r\n\r\n    // Make the context object\r\n    const state = {\r\n        ...game,\r\n        setGame,\r\n        ...player,\r\n        setPlayer,\r\n        CardDeck,\r\n        setCardDeck,\r\n        cardBank,\r\n        setCardBank,\r\n        setPlayerMove\r\n    };\r\n\r\n    return (\r\n        <Context.Provider value={ state }>\r\n            <App />\r\n        </Context.Provider>\r\n    );\r\n\r\n};\r\n"],"sourceRoot":""}